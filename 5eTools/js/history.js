"use strict";class History{static hashChange(a){if(History.isHistorySuppressed)return void History.setSuppressHistory(!1);const[b,...c]=History._getHashParts();let d=!1;if(b!==History.lastLoadedLink||0===c.length||a)if(History.lastLoadedLink=b,b===HASH_BLANK)d=!0;else{const a=History._getListElem(b);if(void 0===a)return"function"==typeof handleUnknownHash&&window.location.hash.length?void handleUnknownHash(b,c):void History._freshLoad();const d=a.attr("id");if(void 0===d)History._freshLoad();else{const b=a.attr("id");History.lastLoadedId=b,loadHash(b),document.title=decodeURIComponent(a.attr("title"))+" - 5etools"}}"function"==typeof loadSubHash&&(0<c.length||a)&&loadSubHash(c),d&&History._freshLoad()}static init(a){window.onhashchange=History.hashChange,window.location.hash.length?History.hashChange():History._freshLoad(),a&&(History.initialLoad=!1)}static setSuppressHistory(a){History.isHistorySuppressed=a}static getSelectedListElement(){const[a,...b]=History._getHashParts();return History._getListElem(a)}static getSelectedListElementWithIndex(){const[a,...b]=History._getHashParts();return History._getListElem(a,!0)}static _getHashParts(){return window.location.hash.slice(1).toLowerCase().replace(/%27/g,"'").split(HASH_PART_SEP)}static _getListElem(a,b){const c=$("#listcontainer");if(c.data("lists"))for(let d=0;d<c.data("lists").length;++d){const e=c.data("lists")[d];for(let c=0;c<e.items.length;++c){const f=e.items[c],g=$(f.elm).find(`a[id]`),h=g.get().find(b=>b.getAttribute("href").split(HASH_PART_SEP)[0]===`#${a}`);if(h)return b?{$el:$(h),x:d,y:c}:$(h)}}}static _freshLoad(){setTimeout(()=>{const a=$("#listcontainer").find(".list a").attr("href");if(a){const b=location.hash.split(HASH_PART_SEP),c=`${a}${1<b.length?`${HASH_PART_SEP}${b.slice(1).join(HASH_PART_SEP)}`:""}`;location.replace(c)}},1)}static cleanSetHash(a){window.location.hash=a.replace(/,+/g,",").replace(/,$/,"").toLowerCase()}static getHashSource(){const[a,...b]=History._getHashParts();return a?a.split(HASH_LIST_SEP).last():null}static getSubHash(a){const[b,...c]=History._getHashParts(),d=`${a}${HASH_SUB_KV_SEP}`,e=c.find(a=>a.startsWith(d));return e?e.slice(d.length):null}static setSubhash(a,b){const[c,...d]=History._getHashParts();c||History.cleanSetHash("");const e=`${a}${HASH_SUB_KV_SEP}`,f=[c];d.length&&d.filter(a=>!a.startsWith(e)).forEach(a=>f.push(a)),null!=b&&f.push(`${e}${b}`),History.cleanSetHash(f.join(HASH_PART_SEP))}}History.lastLoadedLink=null,History.lastLoadedId=null,History.initialLoad=!0,History.isHistorySuppressed=!1;