"use strict";class PropOrder{static getOrdered(a,b){const c=(()=>{switch(b){case"monster":return PropOrder.MONSTER;default:throw new Error(`Unhandled prop "${b}"`);}})(),d={},e=new Set(Object.keys(a)),f=new Set;c.forEach(b=>{f.add(b),e.has(b)&&(d[b]=a[b])});const g=CollectionUtil.setDiff(e,f);return[...g].forEach(b=>d[b]=a[b]),d}}PropOrder.MONSTER=["name","shortName","alias","group","isNpc","isNamedCreature","source","sourceSub","page","otherSources","_copy","size","type","alignment","ac","hp","speed","str","dex","con","int","wis","cha","save","skill","senses","passive","resist","immune","vulnerable","conditionImmune","languages","cr","spellcasting","trait","action","reaction","legendaryHeader","legendaryActions","legendary","legendaryGroup","variant","environment","fluff","familiar","dragonCastingColor","tokenUrl","soundClip","altArt","traitTags","senseTags","actionTags","languageTags","damageTags","spellcastingTags","miscTags"];